#!/bin/bash
#SBATCH --job-name=p???.preprocess
#SBATCH --output=log.preprocess
#SBATCH --mail-user=example@example.com
#SBATCH --mail-type=END
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu=64G
#SBATCH --partition=medpri,k2-medpri


echo ************************* Preprocessing Precursor *************************

# User Input.
startTime=0                     # WARNING: $startTime folder will be DELETED.
                                #    $startTime.original folder mussts exist.

updateBCType=0                  # Boolean for whether or not the boundary condition types will be updated over 
                                #    what is in the initial conditions files. Leave it 0 for precursors

inflowDir='cyclic'              # For inflow/outflow cases, specify the inflow direction.  Choices are 'west',
                                #   'east', 'south', 'west', 'southWest', 'northWest', 'southEast', and
                                #   'northEast'.  There is a 'cyclic' option too in case you need to change
                                #    back to cyclic or simply update the number of boundary face entries.

parallel=0                      # Boolean for whether or not the preprocessing is run in parallel.

cores=1                         # Enter the number of cores you will preprocess on.

refinementLevels=0              # If you want to refine the mesh locally for any reason, or if you are making
                                # a uniform resolution mesh that is so large that you need to build it in serial
                                # at lower resolution and then globally refine, set the number of refinement
                                # levels here.  See the refineMeshSerial and refineMeshParallel functions to 
                                # understand what they do.  The serial version runs topoSet and refineHexMesh, 
                                # so you need to provide system/topoSetDict.local.N files where N corresponds
                                # to the refinement level (i.e., if you are doing nested local refinement boxes.
                                # In most cases, though, you probably will not be refining, so keep this set to 
                                # 0.


refineMeshGlobal() # Global mesh refinement. Performed when running in parallel.
{
   i=1
   while [ $i -le $1 ]; do
      echo "   -Performing level $i global refinement with refineMesh"
      echo "      *refining cells..."
      mpirun -np $cores refineMesh -all -parallel -overwrite > log.refineMesh.global.$i 2>&1

      let i=i+1
   done
}


# Set Environment
source $HOME/.bashrc
sowfa24x

# SOWFA uses controlDict.$runNumber. OpenfOAM uses controlDict
cp system/controlDict.1 system/controlDict

rm -rf $startTime
cp -rf $startTime.original $startTime

echo "Runnning blockMesh"
cp constant/polyMesh/blockMeshDict ./
rm -rf constant/polyMesh/*
mv ./blockMeshDict constant/polyMesh
blockMesh > log.blockMesh 2>&1


if [ $parallel -eq 1 ]; then
   echo "Running decomposePar"
   decomposePar -cellDist -force > log.decomposePar 2>&1

   echo "Operating in parallel from this point"

   echo "Running checkMesh"
   mpirun -np $cores checkMesh -parallel > log.checkMesh.1 2>&1

   refineMeshGlobal $refinementLevels

   echo "Running renumberMesh"
   mpirun -np $cores renumberMesh -parallel -overwrite > log.renumberMesh 2>&1

   echo "Running checkMesh"
   mpirun -np $cores checkMesh -parallel > log.checkMesh.2 2>&1


else 
   echo "Operating in serial"

   echo "Running renumberMesh"
   echo "   -Renumbering the mesh with renumberMesh..."
   renumberMesh -overwrite > log.renumberMesh 2>&1

   echo "Running decomposePar"
   echo "   -Decomposing the domain with decomposePar..."
   decomposePar -cellDist -force > log.decomposePar 2>&1

   echo "Running checkMesh"
   echo "   -Checking the mesh with checkMesh..."
   checkMesh > log.checkMesh.1 2>&1
fi

echo ************************* Finished Preprocessing **************************
